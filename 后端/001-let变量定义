<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>001-let变量定义</title>
	<style>
		div{
			width: 200px;
			height: 200px;
			border: 1px solid #000;
			display: none;
		}
	</style>
</head>
<body>
	<button>1</button>
	<button>2</button>
	<button>3</button>
	<button>4</button>
	<div>1</div>
	<div>2</div>
	<div>3</div>
	<div>4</div>
</body>
<script>
	// var name='Yang';
	// console.log(name)
	// let name='yang';
	//let不会触发声明的提升而var会
	//let和var最重要的区别是函数的作用域
	//块级作用域
	// {
	// 	var age=18;
	// 	let age1=19;
	// }
	// console.log(age);
	// console.log(age1);
	//函数级作用域>块级作用域
	//用let声明的变量只运用于块级作用域，出了块级作用域就拿不到
	var oButtons=document.getElementsByTagName('button');
	var oDivs=document.getElementsByTagName('div');

	//解决i值的问题选项卡案例方法1
	// for(let i =0;i<oButtons.length;i++){
	// 	oButtons[i].onclick=function(){
	// 		console.log(i);
	// 	}
	// }
	//如果用I则会一直打印4因为i定义的是全局变量，全局变量会先循环后打印，let作用于块级作用域，只在块级里面运作，就能避开异步过程，因此解决了这个问题。

	//方法2
	// for(var i =0;i<oButtons.length;i++){
	// 	(function(i){
	// 		oButtons[i].onclick=function(){
	// 			console.log(i);
	// 		}
	// 	})(i);

	// }	
	//方法3
	for(var i=0;i<oButtons.length;i++){
		oButtons[i].index=i;
		oButtons[i].onclick=function(){
			console.log(this.index)
			for(var j=0;j<oDivs.length;j++){
				oDivs[j].style.display='none';
			}
			oDivs[this.index].style.display='block';
		}
	}



	// for(var i=0;i<oDivs.length;i++){
	// 	oDivs[]
	// }
</script>
</html>
